#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class MilvusSegmentGetRequest(object):
    """
    Attributes:
     - search
     - document_ids
     - offset
     - limit
     - sf

    """


    def __init__(self, search=None, document_ids=None, offset=None, limit=None, sf=None,):
        self.search = search
        self.document_ids = document_ids
        self.offset = offset
        self.limit = limit
        self.sf = sf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.search = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.document_ids = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.document_ids.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.offset = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.limit = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.sf = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MilvusSegmentGetRequest')
        if self.search is not None:
            oprot.writeFieldBegin('search', TType.STRING, 1)
            oprot.writeString(self.search.encode('utf-8') if sys.version_info[0] == 2 else self.search)
            oprot.writeFieldEnd()
        if self.document_ids is not None:
            oprot.writeFieldBegin('document_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.document_ids))
            for iter6 in self.document_ids:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I16, 3)
            oprot.writeI16(self.offset)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I16, 4)
            oprot.writeI16(self.limit)
            oprot.writeFieldEnd()
        if self.sf is not None:
            oprot.writeFieldBegin('sf', TType.I16, 5)
            oprot.writeI16(self.sf)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MilvusSegmentUpsertPayload(object):
    """
    Attributes:
     - segment_text
     - document_id
     - section_id
     - segment_id

    """


    def __init__(self, segment_text=None, document_id=None, section_id=None, segment_id=None,):
        self.segment_text = segment_text
        self.document_id = document_id
        self.section_id = section_id
        self.segment_id = segment_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.segment_text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.document_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.section_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.segment_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MilvusSegmentUpsertPayload')
        if self.segment_text is not None:
            oprot.writeFieldBegin('segment_text', TType.STRING, 1)
            oprot.writeString(self.segment_text.encode('utf-8') if sys.version_info[0] == 2 else self.segment_text)
            oprot.writeFieldEnd()
        if self.document_id is not None:
            oprot.writeFieldBegin('document_id', TType.STRING, 2)
            oprot.writeString(self.document_id.encode('utf-8') if sys.version_info[0] == 2 else self.document_id)
            oprot.writeFieldEnd()
        if self.section_id is not None:
            oprot.writeFieldBegin('section_id', TType.STRING, 3)
            oprot.writeString(self.section_id.encode('utf-8') if sys.version_info[0] == 2 else self.section_id)
            oprot.writeFieldEnd()
        if self.segment_id is not None:
            oprot.writeFieldBegin('segment_id', TType.STRING, 4)
            oprot.writeString(self.segment_id.encode('utf-8') if sys.version_info[0] == 2 else self.segment_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MilvusSegmentDeletePayload(object):
    """
    Attributes:
     - document_id
     - section_id
     - segment_id

    """


    def __init__(self, document_id=None, section_id=None, segment_id=None,):
        self.document_id = document_id
        self.section_id = section_id
        self.segment_id = segment_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.document_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.section_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.segment_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MilvusSegmentDeletePayload')
        if self.document_id is not None:
            oprot.writeFieldBegin('document_id', TType.STRING, 2)
            oprot.writeString(self.document_id.encode('utf-8') if sys.version_info[0] == 2 else self.document_id)
            oprot.writeFieldEnd()
        if self.section_id is not None:
            oprot.writeFieldBegin('section_id', TType.STRING, 3)
            oprot.writeString(self.section_id.encode('utf-8') if sys.version_info[0] == 2 else self.section_id)
            oprot.writeFieldEnd()
        if self.segment_id is not None:
            oprot.writeFieldBegin('segment_id', TType.STRING, 4)
            oprot.writeString(self.segment_id.encode('utf-8') if sys.version_info[0] == 2 else self.segment_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class L2SegmentSearchResult(object):
    """
    Attributes:
     - distance
     - document_id
     - section_id
     - segment_id

    """


    def __init__(self, distance=None, document_id=None, section_id=None, segment_id=None,):
        self.distance = distance
        self.document_id = document_id
        self.section_id = section_id
        self.segment_id = segment_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.distance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.document_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.section_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.segment_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('L2SegmentSearchResult')
        if self.distance is not None:
            oprot.writeFieldBegin('distance', TType.DOUBLE, 1)
            oprot.writeDouble(self.distance)
            oprot.writeFieldEnd()
        if self.document_id is not None:
            oprot.writeFieldBegin('document_id', TType.STRING, 2)
            oprot.writeString(self.document_id.encode('utf-8') if sys.version_info[0] == 2 else self.document_id)
            oprot.writeFieldEnd()
        if self.section_id is not None:
            oprot.writeFieldBegin('section_id', TType.STRING, 3)
            oprot.writeString(self.section_id.encode('utf-8') if sys.version_info[0] == 2 else self.section_id)
            oprot.writeFieldEnd()
        if self.segment_id is not None:
            oprot.writeFieldBegin('segment_id', TType.STRING, 4)
            oprot.writeString(self.segment_id.encode('utf-8') if sys.version_info[0] == 2 else self.segment_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class L2SegmentSearchResponse(object):
    """
    Attributes:
     - results
     - total
     - is_error
     - error_text

    """


    def __init__(self, results=None, total=None, is_error=None, error_text=None,):
        self.results = results
        self.total = total
        self.is_error = is_error
        self.error_text = error_text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.results = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = L2SegmentSearchResult()
                        _elem12.read(iprot)
                        self.results.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.total = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.is_error = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.error_text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('L2SegmentSearchResponse')
        if self.results is not None:
            oprot.writeFieldBegin('results', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.results))
            for iter13 in self.results:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.total is not None:
            oprot.writeFieldBegin('total', TType.I32, 2)
            oprot.writeI32(self.total)
            oprot.writeFieldEnd()
        if self.is_error is not None:
            oprot.writeFieldBegin('is_error', TType.BOOL, 3)
            oprot.writeBool(self.is_error)
            oprot.writeFieldEnd()
        if self.error_text is not None:
            oprot.writeFieldBegin('error_text', TType.STRING, 4)
            oprot.writeString(self.error_text.encode('utf-8') if sys.version_info[0] == 2 else self.error_text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class L2SegmentUpsertResponse(object):
    """
    Attributes:
     - insert_count
     - updated_count
     - is_error
     - error_text

    """


    def __init__(self, insert_count=None, updated_count=None, is_error=None, error_text=None,):
        self.insert_count = insert_count
        self.updated_count = updated_count
        self.is_error = is_error
        self.error_text = error_text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.insert_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.updated_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.is_error = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.error_text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('L2SegmentUpsertResponse')
        if self.insert_count is not None:
            oprot.writeFieldBegin('insert_count', TType.I32, 1)
            oprot.writeI32(self.insert_count)
            oprot.writeFieldEnd()
        if self.updated_count is not None:
            oprot.writeFieldBegin('updated_count', TType.I32, 2)
            oprot.writeI32(self.updated_count)
            oprot.writeFieldEnd()
        if self.is_error is not None:
            oprot.writeFieldBegin('is_error', TType.BOOL, 3)
            oprot.writeBool(self.is_error)
            oprot.writeFieldEnd()
        if self.error_text is not None:
            oprot.writeFieldBegin('error_text', TType.STRING, 4)
            oprot.writeString(self.error_text.encode('utf-8') if sys.version_info[0] == 2 else self.error_text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class L2SegmentDeleteResponse(object):
    """
    Attributes:
     - deleted_count
     - is_error
     - error_text

    """


    def __init__(self, deleted_count=None, is_error=None, error_text=None,):
        self.deleted_count = deleted_count
        self.is_error = is_error
        self.error_text = error_text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.deleted_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.is_error = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.error_text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('L2SegmentDeleteResponse')
        if self.deleted_count is not None:
            oprot.writeFieldBegin('deleted_count', TType.I32, 1)
            oprot.writeI32(self.deleted_count)
            oprot.writeFieldEnd()
        if self.is_error is not None:
            oprot.writeFieldBegin('is_error', TType.BOOL, 3)
            oprot.writeBool(self.is_error)
            oprot.writeFieldEnd()
        if self.error_text is not None:
            oprot.writeFieldBegin('error_text', TType.STRING, 4)
            oprot.writeString(self.error_text.encode('utf-8') if sys.version_info[0] == 2 else self.error_text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(MilvusSegmentGetRequest)
MilvusSegmentGetRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'search', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'document_ids', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I16, 'offset', None, None, ),  # 3
    (4, TType.I16, 'limit', None, None, ),  # 4
    (5, TType.I16, 'sf', None, None, ),  # 5
)
all_structs.append(MilvusSegmentUpsertPayload)
MilvusSegmentUpsertPayload.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'segment_text', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'document_id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'section_id', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'segment_id', 'UTF8', None, ),  # 4
)
all_structs.append(MilvusSegmentDeletePayload)
MilvusSegmentDeletePayload.thrift_spec = (
    None,  # 0
    None,  # 1
    (2, TType.STRING, 'document_id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'section_id', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'segment_id', 'UTF8', None, ),  # 4
)
all_structs.append(L2SegmentSearchResult)
L2SegmentSearchResult.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'distance', None, None, ),  # 1
    (2, TType.STRING, 'document_id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'section_id', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'segment_id', 'UTF8', None, ),  # 4
)
all_structs.append(L2SegmentSearchResponse)
L2SegmentSearchResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'results', (TType.STRUCT, [L2SegmentSearchResult, None], False), None, ),  # 1
    (2, TType.I32, 'total', None, None, ),  # 2
    (3, TType.BOOL, 'is_error', None, None, ),  # 3
    (4, TType.STRING, 'error_text', 'UTF8', None, ),  # 4
)
all_structs.append(L2SegmentUpsertResponse)
L2SegmentUpsertResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'insert_count', None, None, ),  # 1
    (2, TType.I32, 'updated_count', None, None, ),  # 2
    (3, TType.BOOL, 'is_error', None, None, ),  # 3
    (4, TType.STRING, 'error_text', 'UTF8', None, ),  # 4
)
all_structs.append(L2SegmentDeleteResponse)
L2SegmentDeleteResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'deleted_count', None, None, ),  # 1
    None,  # 2
    (3, TType.BOOL, 'is_error', None, None, ),  # 3
    (4, TType.STRING, 'error_text', 'UTF8', None, ),  # 4
)
fix_spec(all_structs)
del all_structs
